package addressutil

import (
	"testing"
)

func TestEthAddress(t *testing.T) {
	keys := map[string][]byte{
		"0x374502b5B1e5fA90640Acc72788f7B4fA266A3d0": []byte{0x04, 0xb9, 0xdf, 0x94, 0xef, 0xc1, 0x0e, 0xcc, 0xc2, 0x5b, 0x91, 0xfe, 0xa4, 0x18, 0x56, 0x5d, 0x86, 0x29, 0x81, 0x50, 0x96, 0xa5, 0x14, 0xf5, 0x14, 0x0b, 0xbf, 0xb3, 0xbe, 0xe9, 0x39, 0x4d, 0x29, 0xc5, 0xe9, 0x25, 0xf1, 0x20, 0x10, 0x4f, 0x52, 0xc4, 0x8e, 0x15, 0xc9, 0x37, 0x21, 0x25, 0xb9, 0x7e, 0xc6, 0x20, 0x1f, 0x13, 0xb1, 0xde, 0xd3, 0xd5, 0x0c, 0xce, 0xe2, 0xc2, 0x7b, 0x66, 0xe3},
		"0x6Fb2f15Ad32d59E82Be7d1c3B9f3Ad140E76cC83": []byte{0x04, 0xca, 0x43, 0xea, 0x68, 0xc0, 0x2d, 0x5f, 0x4d, 0xe9, 0x88, 0x17, 0xe7, 0xee, 0xd7, 0xed, 0x4d, 0x3b, 0x2f, 0xbb, 0xc1, 0xee, 0x60, 0xf4, 0xdf, 0x5a, 0xc2, 0x66, 0x7e, 0xc1, 0x9c, 0x3d, 0x32, 0x39, 0xae, 0x1c, 0x48, 0x7e, 0x0c, 0x94, 0xb6, 0xf9, 0x9a, 0xea, 0x06, 0xd9, 0xbf, 0x31, 0x3e, 0x60, 0x7c, 0x58, 0x5e, 0x62, 0x65, 0xcb, 0x50, 0x08, 0x83, 0x0b, 0x6c, 0x64, 0xa6, 0x7b, 0x1b},
		"0xA25b691ac19dD4612dfC1ef0445bA10e029f5907": []byte{0x04, 0x07, 0x84, 0x6a, 0xa8, 0x32, 0xf4, 0xba, 0x90, 0x68, 0xd9, 0x7d, 0x9b, 0xed, 0x2f, 0xe8, 0xdb, 0x66, 0x57, 0xea, 0x88, 0x77, 0xd8, 0x78, 0x77, 0xc8, 0xa9, 0xa4, 0x87, 0x6b, 0x78, 0xe4, 0x76, 0x14, 0x78, 0xcc, 0x3e, 0x8d, 0x4b, 0xf0, 0xae, 0x30, 0x7a, 0x93, 0x77, 0x76, 0x23, 0x77, 0xba, 0xfa, 0x92, 0xc9, 0x2f, 0x6c, 0xc6, 0x38, 0xd6, 0xf4, 0x09, 0x3e, 0x6e, 0x64, 0x95, 0x67, 0xfd},
		"0x76BEf7DB58e52D3dfDDecbD38694238087e3B44d": []byte{0x04, 0x07, 0xb9, 0x83, 0xa2, 0x28, 0x73, 0x25, 0x32, 0xaf, 0x06, 0x70, 0x9e, 0xe4, 0xb0, 0x0d, 0x31, 0x1c, 0x09, 0xd5, 0x14, 0x46, 0x18, 0xab, 0x9c, 0xe1, 0x59, 0x2c, 0x05, 0x25, 0xea, 0x45, 0x88, 0x31, 0x60, 0x3f, 0xa1, 0xbb, 0xcc, 0x60, 0xa2, 0x7f, 0xb7, 0x73, 0xb5, 0xa0, 0x31, 0xec, 0xb1, 0x74, 0xb5, 0xd6, 0x9e, 0x8d, 0xa1, 0xf5, 0xc1, 0xd8, 0xd6, 0x13, 0xfc, 0x1f, 0x3f, 0x45, 0xd4},
		"0x6f186c65bf24910C6E9d6D25B3AF7d6D5B15F6E5": []byte{0x04, 0x88, 0xfd, 0x67, 0xb6, 0x46, 0x31, 0xd2, 0x7f, 0xf7, 0x42, 0xca, 0x12, 0x06, 0x18, 0x3c, 0x33, 0xa2, 0x4c, 0x34, 0xba, 0x4c, 0x14, 0xe0, 0x8d, 0xac, 0xd1, 0x81, 0x6f, 0xe0, 0x32, 0x45, 0x68, 0x99, 0xa7, 0xbe, 0x57, 0xd4, 0x54, 0xdf, 0xa4, 0x36, 0xd9, 0xeb, 0x1c, 0xf2, 0x4b, 0xd0, 0xfe, 0x61, 0x9a, 0x89, 0x23, 0xa7, 0xb5, 0xab, 0x11, 0xc0, 0xae, 0x91, 0xe7, 0x33, 0x9f, 0xb1, 0x82},
		"0x76bDf2e11d0b6D7b7F86d0a64834276Fb74bbfA0": []byte{0x04, 0xa1, 0x77, 0x8d, 0x1f, 0x86, 0x80, 0x46, 0xbb, 0x28, 0x83, 0x9d, 0x97, 0xe5, 0x39, 0x65, 0xe6, 0x02, 0x42, 0x34, 0xea, 0x6a, 0x13, 0xb2, 0x63, 0x2b, 0x27, 0x8b, 0x85, 0xbf, 0xab, 0xa0, 0x4f, 0x3e, 0xf0, 0xb2, 0xff, 0x27, 0x6e, 0x31, 0x94, 0x34, 0x7c, 0x7c, 0xf6, 0xb7, 0x62, 0xbd, 0xcb, 0xcd, 0xfa, 0x2f, 0x1d, 0x89, 0x7e, 0xc0, 0xa8, 0xeb, 0x20, 0xa1, 0x5c, 0xcf, 0x1c, 0xf4, 0xf0},
		"0xb9495Fa28786a2e67DD9E72A6A6EEdFCdB2463D9": []byte{0x04, 0xa3, 0xfb, 0x9f, 0x87, 0x3e, 0xfd, 0x4e, 0x24, 0x99, 0x4c, 0x1b, 0xcb, 0x84, 0x31, 0x8d, 0x21, 0xb9, 0x05, 0x95, 0x70, 0x95, 0x11, 0xe2, 0x01, 0xfa, 0xf5, 0x1d, 0x35, 0xb2, 0xf8, 0xd8, 0xaf, 0x89, 0x2c, 0x02, 0x43, 0xfb, 0x93, 0xab, 0xe5, 0xdd, 0xa7, 0x75, 0x6e, 0x97, 0x30, 0xc5, 0x18, 0x0f, 0x3d, 0x83, 0xdd, 0x9e, 0x99, 0xf6, 0xb0, 0xfc, 0x86, 0x1a, 0x97, 0x4c, 0x13, 0x54, 0x6d},
		"0xf0e6e5aFEEaEf3e0b3086d8992b9639a61c05A64": []byte{0x04, 0xbe, 0x9c, 0x87, 0xd6, 0x00, 0x9d, 0x34, 0x7f, 0xb1, 0x0e, 0x7b, 0xfd, 0xec, 0x5e, 0xcc, 0xe3, 0xa4, 0xd4, 0xdf, 0x1e, 0xef, 0xde, 0x41, 0xe0, 0x18, 0xf2, 0x46, 0xc9, 0x88, 0xbc, 0x9e, 0x61, 0xc9, 0x89, 0x14, 0x5f, 0xcd, 0xe1, 0x9c, 0x50, 0x3b, 0xc3, 0x2c, 0xee, 0x5c, 0xdf, 0x6b, 0x51, 0xbc, 0x41, 0xdc, 0x80, 0x7c, 0xe2, 0x11, 0x1d, 0x65, 0x4a, 0xe3, 0x64, 0xe4, 0x44, 0xb7, 0x32},
		"0xea815C44C32174bFeDCef734566FE3017F910729": []byte{0x04, 0x8f, 0x60, 0xa7, 0x81, 0x72, 0xd6, 0x11, 0xa7, 0x1c, 0xe3, 0xe4, 0x18, 0xbe, 0x8c, 0x12, 0x3a, 0xff, 0x91, 0x58, 0xf1, 0x4b, 0xcb, 0x28, 0x38, 0xfa, 0xdc, 0x61, 0xf6, 0x18, 0x9c, 0x33, 0x08, 0xe9, 0xc2, 0x3d, 0xc3, 0xf4, 0x59, 0xb1, 0xa9, 0xe0, 0x63, 0x11, 0xea, 0x0b, 0x18, 0x13, 0xc3, 0x5d, 0xd6, 0x0c, 0x23, 0x48, 0xd6, 0x8d, 0x12, 0x06, 0xe4, 0x0f, 0x59, 0x4f, 0x7d, 0x8d, 0xcc},
		"0xa40aDd1e1e3b6Fa35e6d2E6C8444944abf8693FB": []byte{0x04, 0x8c, 0x2f, 0x83, 0x30, 0xa9, 0xa8, 0x75, 0x51, 0x6e, 0xad, 0x45, 0xac, 0x72, 0xe7, 0xda, 0x09, 0x13, 0x7e, 0x6c, 0x12, 0xed, 0x1f, 0x63, 0x74, 0xa7, 0xb5, 0x33, 0xd4, 0x73, 0x77, 0x25, 0xe8, 0x81, 0xd3, 0xd2, 0xe1, 0x09, 0xad, 0x3b, 0x3c, 0x27, 0x8b, 0xa3, 0x94, 0x3e, 0xdf, 0x3e, 0x48, 0x58, 0xd9, 0x70, 0x57, 0x1b, 0x56, 0x9c, 0x8e, 0xd5, 0xb4, 0x77, 0x1a, 0xcd, 0x31, 0xec, 0x06},
	}

	for addr, pubKey := range keys {
		if a, err := NewETHAddress(pubKey); err != nil {
			t.Log(err)
			t.Fail()
		} else if a.String() != addr {

			t.Log("Address mismatch", a, addr)
			t.Fail()
		}
	}

}
